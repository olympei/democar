{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/amazon-cognito-identity-management-workshop/website/src/components/ESRIMap.js\";\n\n/*\n *   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\nimport React from 'react';\nimport { loadModules } from 'esri-loader';\n\nclass ESRIMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading'\n    };\n    this.esriOptions = {\n      url: 'https://js.arcgis.com/4.6/'\n    };\n    this.style = {\n      container: {\n        height: '100vh',\n        width: '100vw'\n      },\n      map: {\n        padding: 0,\n        margin: 0,\n        height: '100%',\n        width: '100%'\n      }\n    };\n  }\n  /**\n   * Loads the ESRI modules and returns them as an object\n   */\n\n\n  async loadEsriModules() {\n    const [Map, MapView, Graphic, Point, TextSymbol, PictureMarkerSymbol, webMercatorUtils] = await loadModules(['esri/Map', 'esri/views/MapView', 'esri/Graphic', 'esri/geometry/Point', 'esri/symbols/TextSymbol', 'esri/symbols/PictureMarkerSymbol', 'esri/geometry/support/webMercatorUtils'], this.esriOptions);\n    return {\n      Map,\n      MapView,\n      Graphic,\n      Point,\n      TextSymbol,\n      PictureMarkerSymbol,\n      webMercatorUtils\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const ESRI = await this.loadEsriModules();\n      this.xyToLngLat = ESRI.webMercatorUtils.xyToLngLat;\n      const map = ESRI.Map({\n        basemap: 'gray-vector'\n      });\n      const view = ESRI.MapView({\n        center: [-122.31, 47.60],\n        container: 'esriMapView',\n        map: map,\n        zoom: 12\n      });\n      const pinSymbol = new ESRI.TextSymbol({\n        color: '#f50856',\n        text: '\\ue61d',\n        font: {\n          size: 20,\n          family: 'CalciteWebCoreIcons'\n        }\n      });\n      var unicornSymbol = new ESRI.PictureMarkerSymbol({\n        url: 'https://s3.amazonaws.com/aws-mobile-hub-images/wild-rydes/unicorn-icon.png',\n        width: '25px',\n        height: '25px'\n      });\n      this.pinGraphic = null;\n\n      if (this.props.pinLocation) {\n        this.selectedPoint = this.props.pinLocation;\n        this.pinGraphic = new ESRI.Graphic({\n          symbol: this.state.pinSymbol,\n          geometry: this.selectedPoint\n        });\n        view.graphics.add(this.pinGraphic);\n      } // Watch for map re-centering\n\n\n      view.watch('center', position => this.updateCenter(position)); // Watch for map pinch-and-zoom actions\n\n      view.watch('extent', extent => this.updateExtent(extent)); // Watch for map click events\n\n      view.on('click', event => {\n        this.unsetLocation();\n        this.selectedPoint = event.mapPoint;\n        this.pinGraphic = new ESRI.Graphic({\n          symbol: this.state.pinSymbol,\n          geometry: this.selectedPoint\n        });\n        view.graphics.add(this.pinGraphic);\n\n        if (this.props.onMapClick) {\n          this.props.onMapClick(this.selectedPoint);\n        }\n      });\n      view.then(() => {\n        // Set the current map settings in the object\n        // once it is rendered\n        this.updateCenter(view.center);\n        this.updateExtent(view.extent); // Store the status of the map\n\n        this.setState({\n          map,\n          view,\n          pinSymbol,\n          unicornSymbol,\n          status: 'loaded'\n        });\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  /**\n   * Updates the position of the map by re-centering.\n   *\n   * @param {Point} position the new center of the map\n   */\n\n\n  updateCenter(position) {\n    this.center = {\n      latitude: position.latitude,\n      longitude: position.longitude\n    };\n  }\n  /**\n   * Updates the extents of the map - used when zooming\n   *\n   * @param {Rectangle} extent\n   */\n\n\n  updateExtent(extent) {\n    if (typeof this.xyToLngLat !== 'undefined') {\n      var min = this.xyToLngLat(extent.xmin, extent.ymin);\n      var max = this.xyToLngLat(extent.xmax, extent.ymax);\n      this.extent = {\n        minLng: min[0],\n        minLat: min[1],\n        maxLng: max[0],\n        maxLat: max[1]\n      };\n    }\n  }\n\n  unsetLocation() {\n    this.selectedPoint = null;\n\n    if (this.pinGraphic !== null) {\n      this.state.view.graphics.remove(this.pinGraphic);\n      this.pinGraphic = null;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: this.style.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"esriMapView\",\n      style: this.style.map,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, this.state.status === 'loading' && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 50\n      }\n    }, \"Loading...\")));\n  }\n\n}\n\nESRIMap.defaultProps = {\n  mapOptions: {\n    basemap: 'gray-vector'\n  }\n};\nexport default ESRIMap;","map":{"version":3,"sources":["/home/ec2-user/environment/amazon-cognito-identity-management-workshop/website/src/components/ESRIMap.js"],"names":["React","loadModules","ESRIMap","Component","constructor","props","state","status","esriOptions","url","style","container","height","width","map","padding","margin","loadEsriModules","Map","MapView","Graphic","Point","TextSymbol","PictureMarkerSymbol","webMercatorUtils","componentDidMount","ESRI","xyToLngLat","basemap","view","center","zoom","pinSymbol","color","text","font","size","family","unicornSymbol","pinGraphic","pinLocation","selectedPoint","symbol","geometry","graphics","add","watch","position","updateCenter","extent","updateExtent","on","event","unsetLocation","mapPoint","onMapClick","then","setState","err","console","error","latitude","longitude","min","xmin","ymin","max","xmax","ymax","minLng","minLat","maxLng","maxLat","remove","render","defaultProps","mapOptions"],"mappings":"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","sourcesContent":["/*\n *   Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n *  Licensed under the Apache License, Version 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\nimport React from 'react';\nimport { loadModules } from 'esri-loader';\n\nclass ESRIMap extends React.Component {\n    static defaultProps = {\n      mapOptions: {\n        basemap: 'gray-vector'\n      }\n    };\n\n    constructor(props) {\n      super(props);\n      this.state = { status: 'loading' };\n      this.esriOptions = {\n        url: 'https://js.arcgis.com/4.6/'\n      };\n      this.style = {\n        container: {\n          height: '100vh',\n          width: '100vw'\n        },\n        map: {\n          padding: 0,\n          margin: 0,\n          height: '100%',\n          width: '100%'\n        }\n      };\n    }\n\n    /**\n     * Loads the ESRI modules and returns them as an object\n     */\n    async loadEsriModules() {\n      const [\n        Map,\n        MapView,\n        Graphic,\n        Point,\n        TextSymbol,\n        PictureMarkerSymbol,\n        webMercatorUtils\n      ] = await loadModules([\n        'esri/Map',\n        'esri/views/MapView',\n        'esri/Graphic',\n        'esri/geometry/Point',\n        'esri/symbols/TextSymbol',\n        'esri/symbols/PictureMarkerSymbol',\n        'esri/geometry/support/webMercatorUtils'\n      ], this.esriOptions);\n\n      return {\n        Map,\n        MapView,\n        Graphic,\n        Point,\n        TextSymbol,\n        PictureMarkerSymbol,\n        webMercatorUtils\n      };\n    }\n\n    async componentDidMount() {\n      try {\n        const ESRI = await this.loadEsriModules();\n        this.xyToLngLat = ESRI.webMercatorUtils.xyToLngLat;\n\n        const map = ESRI.Map({ basemap: 'gray-vector' });\n        const view = ESRI.MapView({\n          center: [-122.31, 47.60],\n          container: 'esriMapView',\n          map: map,\n          zoom: 12\n        });\n\n        const pinSymbol = new ESRI.TextSymbol({\n          color: '#f50856',\n          text: '\\ue61d',\n          font: { size: 20, family: 'CalciteWebCoreIcons' }\n        });\n\n        var unicornSymbol = new ESRI.PictureMarkerSymbol({\n          url: 'https://s3.amazonaws.com/aws-mobile-hub-images/wild-rydes/unicorn-icon.png',\n          width: '25px',\n          height: '25px'\n        });\n\n        this.pinGraphic = null;\n        if (this.props.pinLocation) {\n          this.selectedPoint = this.props.pinLocation;\n          this.pinGraphic = new ESRI.Graphic({\n            symbol: this.state.pinSymbol,\n            geometry: this.selectedPoint\n          });\n          view.graphics.add(this.pinGraphic);\n        }\n\n        // Watch for map re-centering\n        view.watch('center', (position) => this.updateCenter(position));\n\n        // Watch for map pinch-and-zoom actions\n        view.watch('extent', (extent) => this.updateExtent(extent));\n\n        // Watch for map click events\n        view.on('click', (event) => {\n          this.unsetLocation();\n          this.selectedPoint = event.mapPoint;\n          this.pinGraphic = new ESRI.Graphic({\n            symbol: this.state.pinSymbol,\n            geometry: this.selectedPoint\n          });\n          view.graphics.add(this.pinGraphic);\n\n          if (this.props.onMapClick) {\n            this.props.onMapClick(this.selectedPoint);\n          }\n        });\n\n        view.then(() => {\n          // Set the current map settings in the object\n          // once it is rendered\n          this.updateCenter(view.center);\n          this.updateExtent(view.extent);\n\n          // Store the status of the map\n          this.setState({\n            map,\n            view,\n            pinSymbol,\n            unicornSymbol,\n            status: 'loaded'\n          });\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    /**\n     * Updates the position of the map by re-centering.\n     *\n     * @param {Point} position the new center of the map\n     */\n    updateCenter(position) {\n      this.center = {\n        latitude: position.latitude,\n        longitude: position.longitude\n      }\n    }\n\n    /**\n     * Updates the extents of the map - used when zooming\n     *\n     * @param {Rectangle} extent\n     */\n    updateExtent(extent) {\n      if (typeof this.xyToLngLat !== 'undefined') {\n        var min = this.xyToLngLat(extent.xmin, extent.ymin);\n        var max = this.xyToLngLat(extent.xmax, extent.ymax);\n        this.extent = {\n          minLng: min[0],\n          minLat: min[1],\n          maxLng: max[0],\n          maxLat: max[1]\n        };\n      }\n    }\n\n    unsetLocation() {\n      this.selectedPoint = null;\n      if (this.pinGraphic !== null) {\n        this.state.view.graphics.remove(this.pinGraphic);\n        this.pinGraphic = null;\n      }\n    }\n\n    render() {\n      return (\n        <div style={this.style.container}>\n          <div id='esriMapView' style={this.style.map}>\n            {this.state.status === 'loading' && (<div>Loading...</div>)}\n          </div>\n        </div>\n      );\n    }\n}\n\nexport default ESRIMap;\n"]},"metadata":{},"sourceType":"module"}